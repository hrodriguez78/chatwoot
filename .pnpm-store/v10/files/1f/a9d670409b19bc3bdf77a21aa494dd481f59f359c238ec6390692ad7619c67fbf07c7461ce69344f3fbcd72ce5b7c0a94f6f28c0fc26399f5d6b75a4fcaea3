{"version":3,"file":"intercom-integration.js","sources":["../src/utils/globals.ts","../src/utils/logger.ts","../../core/dist/utils/type-utils.mjs","../src/entrypoints/intercom-integration.ts"],"sourcesContent":["import { ErrorProperties } from '../extensions/exception-autocapture/error-conversion'\nimport type { PostHog } from '../posthog-core'\nimport { SessionIdManager } from '../sessionid'\nimport { DeadClicksAutoCaptureConfig, ExternalIntegrationKind, RemoteConfig, SiteAppLoader } from '../types'\n\n/*\n * Global helpers to protect access to browser globals in a way that is safer for different targets\n * like DOM, SSR, Web workers etc.\n *\n * NOTE: Typically we want the \"window\" but globalThis works for both the typical browser context as\n * well as other contexts such as the web worker context. Window is still exported for any bits that explicitly require it.\n * If in doubt - export the global you need from this file and use that as an optional value. This way the code path is forced\n * to handle the case where the global is not available.\n */\n\n// eslint-disable-next-line no-restricted-globals\nconst win: (Window & typeof globalThis) | undefined = typeof window !== 'undefined' ? window : undefined\n\nexport type AssignableWindow = Window &\n    typeof globalThis & {\n        /*\n         * Main PostHog instance\n         */\n        posthog: any\n\n        /*\n         * This is our contract between (potentially) lazily loaded extensions and the SDK\n         */\n        __PosthogExtensions__?: PostHogExtensions\n\n        /**\n         * When loading remote config, we assign it to this global configuration\n         * for ease of sharing it with the rest of the SDK\n         */\n        _POSTHOG_REMOTE_CONFIG?: Record<\n            string,\n            {\n                config: RemoteConfig\n                siteApps: SiteAppLoader[]\n            }\n        >\n\n        /**\n         * If this is set on the window, our logger will log to the console\n         * for ease of debugging. Used for testing purposes only.\n         *\n         * @see {Config.DEBUG} from config.ts\n         */\n        POSTHOG_DEBUG: any\n\n        // Exposed by the browser\n        doNotTrack: any\n\n        // See entrypoints/customizations.full.ts\n        posthogCustomizations: any\n\n        /**\n         * This is a legacy way to expose these functions, but we still need to support it for backwards compatibility\n         * Can be removed once we drop support for 1.161.1\n         *\n         * See entrypoints/exception-autocapture.ts\n         *\n         * @deprecated use `__PosthogExtensions__.errorWrappingFunctions` instead\n         */\n        posthogErrorWrappingFunctions: any\n\n        /**\n         * This is a legacy way to expose these functions, but we still need to support it for backwards compatibility\n         * Can be removed once we drop support for 1.161.1\n         *\n         * See entrypoints/posthog-recorder.ts\n         *\n         * @deprecated use `__PosthogExtensions__.rrweb` instead\n         */\n        rrweb: any\n\n        /**\n         * This is a legacy way to expose these functions, but we still need to support it for backwards compatibility\n         * Can be removed once we drop support for 1.161.1\n         *\n         * See entrypoints/posthog-recorder.ts\n         *\n         * @deprecated use `__PosthogExtensions__.rrwebConsoleRecord` instead\n         */\n        rrwebConsoleRecord: any\n\n        /**\n         * This is a legacy way to expose these functions, but we still need to support it for backwards compatibility\n         * Can be removed once we drop support for 1.161.1\n         *\n         * See entrypoints/posthog-recorder.ts\n         *\n         * @deprecated use `__PosthogExtensions__.getRecordNetworkPlugin` instead\n         */\n        getRecordNetworkPlugin: any\n\n        /**\n         * This is a legacy way to expose these functions, but we still need to support it for backwards compatibility\n         * Can be removed once we drop support for 1.161.1\n         *\n         * See entrypoints/web-vitals.ts\n         *\n         * @deprecated use `__PosthogExtensions__.postHogWebVitalsCallbacks` instead\n         */\n        postHogWebVitalsCallbacks: any\n\n        /**\n         * This is a legacy way to expose these functions, but we still need to support it for backwards compatibility\n         * Can be removed once we drop support for 1.161.1\n         *\n         * See entrypoints/tracing-headers.ts\n         *\n         * @deprecated use `__PosthogExtensions__.postHogTracingHeadersPatchFns` instead\n         */\n        postHogTracingHeadersPatchFns: any\n\n        /**\n         * This is a legacy way to expose these functions, but we still need to support it for backwards compatibility\n         * Can be removed once we drop support for 1.161.1\n         *\n         * See entrypoints/surveys.ts\n         *\n         * @deprecated use `__PosthogExtensions__.generateSurveys` instead\n         */\n        extendPostHogWithSurveys: any\n\n        /*\n         * These are used to handle our toolbar state.\n         * @see {Toolbar} from extensions/toolbar.ts\n         */\n        ph_load_toolbar: any\n        ph_load_editor: any\n        ph_toolbar_state: any\n    } & Record<`__$$ph_site_app_${string}`, any>\n\n/**\n * This is our contract between (potentially) lazily loaded extensions and the SDK\n * changes to this interface can be breaking changes for users of the SDK\n */\n\nexport type ExternalExtensionKind = 'intercom-integration' | 'crisp-chat-integration'\n\nexport type PostHogExtensionKind =\n    | 'toolbar'\n    | 'exception-autocapture'\n    | 'web-vitals'\n    | 'recorder'\n    | 'tracing-headers'\n    | 'surveys'\n    | 'dead-clicks-autocapture'\n    | 'remote-config'\n    | ExternalExtensionKind\n\nexport interface LazyLoadedDeadClicksAutocaptureInterface {\n    start: (observerTarget: Node) => void\n    stop: () => void\n}\n\ninterface PostHogExtensions {\n    loadExternalDependency?: (\n        posthog: PostHog,\n        kind: PostHogExtensionKind,\n        callback: (error?: string | Event, event?: Event) => void\n    ) => void\n\n    loadSiteApp?: (posthog: PostHog, appUrl: string, callback: (error?: string | Event, event?: Event) => void) => void\n\n    errorWrappingFunctions?: {\n        wrapOnError: (captureFn: (props: ErrorProperties) => void) => () => void\n        wrapUnhandledRejection: (captureFn: (props: ErrorProperties) => void) => () => void\n        wrapConsoleError: (captureFn: (props: ErrorProperties) => void) => () => void\n    }\n    rrweb?: { record: any; version: string }\n    rrwebPlugins?: { getRecordConsolePlugin: any; getRecordNetworkPlugin?: any }\n    generateSurveys?: (posthog: PostHog, isSurveysEnabled: boolean) => any | undefined\n    postHogWebVitalsCallbacks?: {\n        onLCP: (metric: any) => void\n        onCLS: (metric: any) => void\n        onFCP: (metric: any) => void\n        onINP: (metric: any) => void\n    }\n    tracingHeadersPatchFns?: {\n        _patchFetch: (hostnames: string[], distinctId: string, sessionManager?: SessionIdManager) => () => void\n        _patchXHR: (hostnames: string[], distinctId: string, sessionManager?: SessionIdManager) => () => void\n    }\n    initDeadClicksAutocapture?: (\n        ph: PostHog,\n        config: DeadClicksAutoCaptureConfig\n    ) => LazyLoadedDeadClicksAutocaptureInterface\n    integrations?: {\n        [K in ExternalIntegrationKind]?: { start: (posthog: PostHog) => void; stop: () => void }\n    }\n}\n\nconst global: typeof globalThis | undefined = typeof globalThis !== 'undefined' ? globalThis : win\n\nexport const ArrayProto = Array.prototype\nexport const nativeForEach = ArrayProto.forEach\nexport const nativeIndexOf = ArrayProto.indexOf\n\nexport const navigator = global?.navigator\nexport const document = global?.document\nexport const location = global?.location\nexport const fetch = global?.fetch\nexport const XMLHttpRequest =\n    global?.XMLHttpRequest && 'withCredentials' in new global.XMLHttpRequest() ? global.XMLHttpRequest : undefined\nexport const AbortController = global?.AbortController\nexport const userAgent = navigator?.userAgent\nexport const assignableWindow: AssignableWindow = win ?? ({} as any)\n\nexport { win as window }\n","import Config from '../config'\nimport { isUndefined } from '@posthog/core'\nimport { assignableWindow, window } from './globals'\nimport type { Logger } from '@posthog/core'\n\nconst _createLogger = (prefix: string): Logger => {\n    const logger: Logger = {\n        _log: (level: 'log' | 'warn' | 'error', ...args: any[]) => {\n            if (\n                window &&\n                (Config.DEBUG || assignableWindow.POSTHOG_DEBUG) &&\n                !isUndefined(window.console) &&\n                window.console\n            ) {\n                const consoleLog =\n                    '__rrweb_original__' in window.console[level]\n                        ? (window.console[level] as any)['__rrweb_original__']\n                        : window.console[level]\n\n                // eslint-disable-next-line no-console\n                consoleLog(prefix, ...args)\n            }\n        },\n\n        info: (...args: any[]) => {\n            logger._log('log', ...args)\n        },\n\n        warn: (...args: any[]) => {\n            logger._log('warn', ...args)\n        },\n\n        error: (...args: any[]) => {\n            logger._log('error', ...args)\n        },\n\n        critical: (...args: any[]) => {\n            // Critical errors are always logged to the console\n            // eslint-disable-next-line no-console\n            console.error(prefix, ...args)\n        },\n\n        uninitializedWarning: (methodName: string) => {\n            logger.error(`You must initialize PostHog before calling ${methodName}`)\n        },\n\n        createLogger: (additionalPrefix: string) => _createLogger(`${prefix} ${additionalPrefix}`),\n    }\n    return logger\n}\n\nexport const logger = _createLogger('[PostHog.js]')\n\nexport const createLogger = logger.createLogger\n","import { knownUnsafeEditableEvent } from \"../types.mjs\";\nimport { includes } from \"./string-utils.mjs\";\nconst nativeIsArray = Array.isArray;\nconst ObjProto = Object.prototype;\nconst type_utils_hasOwnProperty = ObjProto.hasOwnProperty;\nconst type_utils_toString = ObjProto.toString;\nconst isArray = nativeIsArray || function(obj) {\n    return '[object Array]' === type_utils_toString.call(obj);\n};\nconst isFunction = (x)=>'function' == typeof x;\nconst isNativeFunction = (x)=>isFunction(x) && -1 !== x.toString().indexOf('[native code]');\nconst isObject = (x)=>x === Object(x) && !isArray(x);\nconst isEmptyObject = (x)=>{\n    if (isObject(x)) {\n        for(const key in x)if (type_utils_hasOwnProperty.call(x, key)) return false;\n        return true;\n    }\n    return false;\n};\nconst isUndefined = (x)=>void 0 === x;\nconst isString = (x)=>'[object String]' == type_utils_toString.call(x);\nconst isEmptyString = (x)=>isString(x) && 0 === x.trim().length;\nconst isNull = (x)=>null === x;\nconst isNullish = (x)=>isUndefined(x) || isNull(x);\nconst isNumber = (x)=>'[object Number]' == type_utils_toString.call(x);\nconst isBoolean = (x)=>'[object Boolean]' === type_utils_toString.call(x);\nconst isFormData = (x)=>x instanceof FormData;\nconst isFile = (x)=>x instanceof File;\nconst isError = (x)=>x instanceof Error;\nconst isKnownUnsafeEditableEvent = (x)=>includes(knownUnsafeEditableEvent, x);\nexport { type_utils_hasOwnProperty as hasOwnProperty, isArray, isBoolean, isEmptyObject, isEmptyString, isError, isFile, isFormData, isFunction, isKnownUnsafeEditableEvent, isNativeFunction, isNull, isNullish, isNumber, isObject, isString, isUndefined };\n","import { PostHog } from '../posthog-core'\nimport { assignableWindow } from '../utils/globals'\nimport { createLogger } from '../utils/logger'\n\nconst logger = createLogger('[PostHog Intercom integration]')\n\nconst reportedSessionIds = new Set<string>()\nlet sessionIdListenerUnsubscribe: undefined | (() => void) = undefined\n\nassignableWindow.__PosthogExtensions__ = assignableWindow.__PosthogExtensions__ || {}\nassignableWindow.__PosthogExtensions__.integrations = assignableWindow.__PosthogExtensions__.integrations || {}\nassignableWindow.__PosthogExtensions__.integrations.intercom = {\n    start: (posthog: PostHog) => {\n        if (!posthog.config.integrations?.intercom) {\n            return\n        }\n\n        const intercom = (assignableWindow as any).Intercom\n        if (!intercom) {\n            logger.warn('Intercom not found while initializing the integration')\n            return\n        }\n\n        const updateIntercom = () => {\n            const replayUrl = posthog.get_session_replay_url()\n            const personUrl = posthog.requestRouter.endpointFor(\n                'ui',\n                `/project/${posthog.config.token}/person/${posthog.get_distinct_id()}`\n            )\n\n            intercom('update', {\n                latestPosthogReplayURL: replayUrl,\n                latestPosthogPersonURL: personUrl,\n            })\n            intercom('trackEvent', 'posthog:sessionInfo', { replayUrl, personUrl })\n        }\n\n        // this is called immediately if there's a session id\n        // and then again whenever the session id changes\n        sessionIdListenerUnsubscribe = posthog.onSessionId((sessionId) => {\n            if (!reportedSessionIds.has(sessionId)) {\n                updateIntercom()\n                reportedSessionIds.add(sessionId)\n            }\n        })\n\n        logger.info('integration started')\n    },\n    stop: () => {\n        sessionIdListenerUnsubscribe?.()\n        sessionIdListenerUnsubscribe = undefined\n    },\n}\n"],"names":["win","window","undefined","global","globalThis","navigator","document","location","fetch","XMLHttpRequest","AbortController","userAgent","assignableWindow","_createLogger","prefix","logger","_log","level","console","consoleLog","_len","arguments","length","args","Array","_key","info","_len2","_key2","warn","_len3","_key3","error","_len4","_key4","critical","_len5","_key5","uninitializedWarning","methodName","createLogger","additionalPrefix","reportedSessionIds","Set","sessionIdListenerUnsubscribe","__PosthogExtensions__","integrations","intercom","start","posthog","_posthog$config$integ","config","Intercom","onSessionId","sessionId","updateIntercom","replayUrl","personUrl","has","get_session_replay_url","requestRouter","endpointFor","token","get_distinct_id","latestPosthogReplayURL","latestPosthogPersonURL","add","stop"],"mappings":"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"}